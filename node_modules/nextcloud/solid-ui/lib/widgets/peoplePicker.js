'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GroupBuilder = exports.Group = exports.GroupPicker = exports.PeoplePicker = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**

eople Picker Pane

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * This pane offers a mechanism for selecting a set of individuals, groups, or
organizations to take some action on.

ssumptions
ssumes that the user has a type index entry for vcard:AddressBook.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *



var _templateObject = _taggedTemplateLiteral(['\n        To add someone to this group, drag and drop their WebID URL onto the box.\n      '], ['\n        To add someone to this group, drag and drop their WebID URL onto the box.\n      ']);

var _escapeHtml = require('escape-html');

var _escapeHtml2 = _interopRequireDefault(_escapeHtml);

var _nodeUuid = require('node-uuid');

var _nodeUuid2 = _interopRequireDefault(_nodeUuid);

var _rdflib = require('rdflib');

var _rdflib2 = _interopRequireDefault(_rdflib);

var _dragAndDrop = require('./dragAndDrop');

var _error = require('./error');

var _iconBase = require('../iconBase');

var _ns = require('../ns');

var _ns2 = _interopRequireDefault(_ns);

var _store = require('../store');

var _store2 = _interopRequireDefault(_store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var webClient = require('solid-web-client')(_rdflib2.default);

var PeoplePicker = exports.PeoplePicker = function () {
  function PeoplePicker(element, typeIndexUrl, groupPickedCb, selectedGroupNode) {
    _classCallCheck(this, PeoplePicker);

    this.element = element;
    this.typeIndexUrl = typeIndexUrl;
    this.groupPickedCb = groupPickedCb;
    this.selectedGroupNode = selectedGroupNode;
    this.onSelectGroup = this.onSelectGroup.bind(this);
  }

  _createClass(PeoplePicker, [{
    key: 'render',
    value: function render() {
      var _this = this;

      var container = document.createElement('div');
      container.style.maxWidth = '350px';
      container.style.minHeight = '200px';
      container.style.outline = '1px solid black';
      container.style.display = 'flex';

      if (this.selectedGroupNode) {
        container.style.flexDirection = 'column';
        var selectedGroup = document.createElement('div');
        new Group(selectedGroup, this.selectedGroupNode).render();
        var changeGroupButton = document.createElement('button');
        changeGroupButton.textContent = (0, _escapeHtml2.default)('Change group');
        changeGroupButton.addEventListener('click', function (event) {
          _this.selectedGroupNode = null;
          _this.render();
        });
        container.appendChild(selectedGroup);
        container.appendChild(changeGroupButton);
      } else {
        this.findGroupIndex(this.typeIndexUrl).then(function (_ref) {
          var bookBaseUrl = _ref.bookBaseUrl;

          var chooseExistingGroupButton = document.createElement('button');
          chooseExistingGroupButton.textContent = (0, _escapeHtml2.default)('Pick an existing group');
          chooseExistingGroupButton.style.margin = 'auto';
          chooseExistingGroupButton.addEventListener('click', function (event) {
            new GroupPicker(container, bookBaseUrl, _this.onSelectGroup).render();
          });

          var createNewGroupButton = document.createElement('button');
          createNewGroupButton.textContent = (0, _escapeHtml2.default)('Create a new group');
          createNewGroupButton.style.margin = 'auto';
          createNewGroupButton.addEventListener('click', function (event) {
            _this.createNewGroup(bookBaseUrl).then(function (_ref2) {
              var groupNode = _ref2.groupNode,
                  graphNode = _ref2.graphNode;

              new GroupBuilder(_this.element, bookBaseUrl, graphNode, groupNode, _this.onSelectGroup).render();
            }).catch(function (errorBody) {
              _this.element.appendChild((0, _error.errorMessageBlock)(document, (0, _escapeHtml2.default)('Error creating a new group. (' + errorBody + ')')));
            });
          });

          container.appendChild(chooseExistingGroupButton);
          container.appendChild(createNewGroupButton);

          _this.element.innerHTML = '';
          _this.element.appendChild(container);
        }).catch(function (err) {
          _this.element.appendChild((0, _error.errorMessageBlock)(document, (0, _escapeHtml2.default)('Could find your groups. (' + err + ')')));
        });
      }

      this.element.innerHTML = '';
      this.element.appendChild(container);
      return this;
    }
  }, {
    key: 'findGroupIndex',
    value: function findGroupIndex(typeIndexUrl) {
      return new Promise(function (resolve, reject) {
        _store2.default.fetcher.nowOrWhenFetched(typeIndexUrl, function (ok, err) {
          if (!ok) {
            return reject(err);
          }
          var bookRegistrations = _store2.default.statementsMatching(null, _ns2.default.solid('forClass'), _ns2.default.vcard('AddressBook'));
          if (bookRegistrations.length < 1) {
            return reject(new Error('no address book registered in the solid type index'));
          }
          // According to vcard footprint (https://www.w3.org/2015/03/vcard-footprint/footprint.html),
          // vcard:AddressBook should be listed in the the base URI $b/book.ttl
          var registrationSubject = bookRegistrations[0].subject;
          var instance = _store2.default.statementsMatching(registrationSubject, _ns2.default.solid('instance'));
          if (!instance.length) {
            reject(new Error('incomplete address book registration'));
          }
          // We've found an address book
          var bookUrl = instance[0].object.value;
          var bookBaseUrl = bookUrl.replace(/book\.ttl(#.*)?$/, '');
          return resolve({ bookBaseUrl: bookBaseUrl });
        });
      });
    }
  }, {
    key: 'createNewGroup',
    value: function createNewGroup(bookBaseUrl) {
      var _bookUrls = bookUrls(bookBaseUrl),
          groupIndexUrl = _bookUrls.groupIndexUrl,
          groupContainerUrl = _bookUrls.groupContainerUrl,
          bookIndexUrl = _bookUrls.bookIndexUrl;

      var groupIndexNode = _rdflib2.default.namedNode(groupIndexUrl);
      var graphUrl = '' + groupContainerUrl + _nodeUuid2.default.v4().slice(0, 8) + '.ttl';
      var graphNode = _rdflib2.default.namedNode(graphUrl);
      var groupNode = _rdflib2.default.namedNode(graphUrl + '#this');
      // NOTE that order matters here.  Unfortunately this type of update is
      // non-atomic in that solid requires us to send two PATCHes, either of which
      // might fail.
      var patchPromises = [graphNode, groupIndexNode].map(function (namedGraph) {
        var typeStatement = _rdflib2.default.st(groupNode, _ns2.default.rdf('type'), _ns2.default.vcard('Group'));
        var nameStatement = _rdflib2.default.st(groupNode, _ns2.default.vcard('fn'), _rdflib2.default.literal('Untitled Group'));
        var includesGroupStatement = _rdflib2.default.st(_rdflib2.default.namedNode(bookIndexUrl + '#this'), _ns2.default.vcard('includesGroup'), groupNode);
        var toIns = namedGraph.equals(groupIndexNode) ? [typeStatement, nameStatement, includesGroupStatement] : [typeStatement, nameStatement];
        return patch(namedGraph.value, { toIns: toIns }).then(function () {
          toIns.forEach(function (st) {
            st.why = namedGraph;
            _store2.default.add(st);
          });
        });
      });
      return Promise.all(patchPromises).then(function () {
        return { groupNode: groupNode, graphNode: graphNode };
      }).catch(function (err) {
        throw new Error('Couldn\'t create new group.  PATCH failed for (' + err.xhr.responseURL + ')');
      });
    }
  }, {
    key: 'onSelectGroup',
    value: function onSelectGroup(groupNode) {
      this.selectedGroupNode = groupNode;
      this.groupPickedCb(groupNode);
      this.render();
    }
  }]);

  return PeoplePicker;
}();

var GroupPicker = exports.GroupPicker = function () {
  function GroupPicker(element, bookBaseUrl, onSelectGroup) {
    _classCallCheck(this, GroupPicker);

    this.element = element;
    this.bookBaseUrl = bookBaseUrl;
    this.onSelectGroup = onSelectGroup;
  }

  _createClass(GroupPicker, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      this.loadGroups().then(function (groupNodes) {
        // render the groups
        var container = document.createElement('div');
        container.style.display = 'flex';
        container.style.flexDirection = 'column';
        groupNodes.forEach(function (group) {
          var groupButton = document.createElement('button');
          groupButton.addEventListener('click', _this2.handleClickGroup(group));
          new Group(groupButton, group).render();
          container.appendChild(groupButton);
        });
        _this2.element.innerHTML = '';
        _this2.element.appendChild(container);
      }).catch(function (err) {
        _this2.element.appendChild((0, _error.errorMessageBlock)(document, (0, _escapeHtml2.default)('There was an error loading your groups. (' + err + ')')));
      });
      return this;
    }
  }, {
    key: 'loadGroups',
    value: function loadGroups() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        var _bookUrls2 = bookUrls(_this3.bookBaseUrl),
            bookIndexUrl = _bookUrls2.bookIndexUrl,
            groupIndexUrl = _bookUrls2.groupIndexUrl;

        _store2.default.fetcher.nowOrWhenFetched(groupIndexUrl, function (ok, err) {
          if (!ok) {
            return reject(err);
          }
          var groupNodes = _store2.default.match(_rdflib2.default.namedNode(bookIndexUrl + '#this'), _ns2.default.vcard('includesGroup')).map(function (st) {
            return st.object;
          });
          return resolve(groupNodes);
        });
      });
    }
  }, {
    key: 'handleClickGroup',
    value: function handleClickGroup(group) {
      var _this4 = this;

      return function (event) {
        _this4.onSelectGroup(group);
      };
    }
  }]);

  return GroupPicker;
}();

var Group = exports.Group = function () {
  function Group(element, groupNode) {
    _classCallCheck(this, Group);

    this.element = element;
    this.groupNode = groupNode;
  }

  _createClass(Group, [{
    key: 'render',
    value: function render() {
      var container = document.createElement('div');
      container.textContent = (0, _escapeHtml2.default)(getWithDefault(this.groupNode, _ns2.default.vcard('fn'), '[' + this.groupNode.value + ']'));
      this.element.innerHTML = '';
      this.element.appendChild(container);
      return this;
    }
  }]);

  return Group;
}();

var GroupBuilder = exports.GroupBuilder = function () {
  function GroupBuilder(element, bookBaseUrl, groupGraph, groupNode, doneBuildingCb, groupChangedCb) {
    _classCallCheck(this, GroupBuilder);

    this.element = element;
    this.bookBaseUrl = bookBaseUrl;
    this.groupGraph = groupGraph;
    this.groupNode = groupNode;
    this.onGroupChanged = function (err, changeType, agent) {
      if (groupChangedCb) {
        groupChangedCb(err, changeType, agent);
      }
    };
    this.groupChangedCb = groupChangedCb;
    this.doneBuildingCb = doneBuildingCb;
  }

  _createClass(GroupBuilder, [{
    key: 'refresh',
    value: function refresh() {
      // TODO: implement
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var dropContainer = document.createElement('div');
      dropContainer.style.maxWidth = '350px';
      dropContainer.style.minHeight = '200px';
      dropContainer.style.outline = '1px solid black';
      dropContainer.style.display = 'flex';
      dropContainer.style.flexDirection = 'column';

      (0, _dragAndDrop.makeDropTarget)(dropContainer, function (uris) {
        uris.map(function (uri) {
          _this5.add(uri).catch(function (err) {
            _this5.element.appendChild((0, _error.errorMessageBlock)(document, (0, _escapeHtml2.default)('Could not add the given WebId. (' + err + ')')));
          });
        });
      });

      var groupNameInput = document.createElement('input');
      groupNameInput.type = 'text';
      groupNameInput.value = getWithDefault(this.groupNode, _ns2.default.vcard('fn'), 'Untitled Group');
      groupNameInput.addEventListener('change', function (event) {
        _this5.setGroupName(event.target.value).catch(function (err) {
          _this5.element.appendChild((0, _error.errorMessageBlock)(document, 'Error changing group name. (' + err + ')'));
        });
      });
      var groupNameLabel = document.createElement('label');
      groupNameLabel.textContent = (0, _escapeHtml2.default)('Group Name:');
      groupNameLabel.appendChild(groupNameInput);
      dropContainer.appendChild(groupNameLabel);

      if (_store2.default.any(this.groupNode, _ns2.default.vcard('hasMember'))) {
        _store2.default.match(this.groupNode, _ns2.default.vcard('hasMember')).forEach(function (statement) {
          var webIdNode = statement.object;
          var personDiv = document.createElement('div');
          new Person(personDiv, webIdNode, _this5.handleRemove(webIdNode)).render();
          dropContainer.appendChild(personDiv);
        });
      } else {
        var copy = document.createElement('p');
        copy.textContent = (0, _escapeHtml2.default)(_templateObject);
        dropContainer.appendChild(copy);
      }

      var doneBuildingButton = document.createElement('button');
      doneBuildingButton.textContent = (0, _escapeHtml2.default)('Done');
      doneBuildingButton.addEventListener('click', function (event) {
        _this5.doneBuildingCb(_this5.groupNode);
      });
      dropContainer.appendChild(doneBuildingButton);

      this.element.innerHTML = '';
      this.element.appendChild(dropContainer);
      return this;
    }
  }, {
    key: 'add',
    value: function add(webId) {
      var _this6 = this;

      return new Promise(function (resolve, reject) {
        _store2.default.fetcher.nowOrWhenFetched(webId, function (ok, err) {
          if (!ok) {
            _this6.onGroupChanged(err);
            return reject(err);
          }
          // make sure it's a valid person, group, or entity (for now just handle
          // webId)
          var webIdNode = _rdflib2.default.namedNode(webId);
          var rdfClass = _store2.default.any(webIdNode, _ns2.default.rdf('type'));
          if (!rdfClass || !rdfClass.equals(_ns2.default.foaf('Person'))) {
            return reject(new Error('Only people supported right now. (tried to add something of type ' + rdfClass.value + ')'));
          }
          return resolve(webIdNode);
        });
      }).then(function (webIdNode) {
        var statement = _rdflib2.default.st(_this6.groupNode, _ns2.default.vcard('hasMember'), webIdNode);
        if (_store2.default.holdsStatement(statement)) {
          return webIdNode;
        }
        return patch(_this6.groupGraph.value, { toIns: [statement] }).then(function () {
          statement.why = _this6.groupGraph;
          _store2.default.add(statement);
          _this6.onGroupChanged(null, 'added', webIdNode);
          _this6.render();
        });
      });
    }
  }, {
    key: 'handleRemove',
    value: function handleRemove(webIdNode) {
      var _this7 = this;

      return function (event) {
        var statement = _rdflib2.default.st(_this7.groupNode, _ns2.default.vcard('hasMember'), webIdNode);
        return patch(_this7.groupGraph.value, { toDel: [statement] }).then(function () {
          _store2.default.remove(statement);
          _this7.onGroupChanged(null, 'removed', webIdNode);
          _this7.render();
          return true;
        }).catch(function (err) {
          var name = _store2.default.any(webIdNode, _ns2.default.foaf('name'));
          var errorMessage = name && name.value ? 'Could not remove ' + name.value + '. (' + err + ')' : 'Could not remove ' + webIdNode.value + '. (' + err + ')';
          throw new Error(errorMessage);
        });
      };
    }
  }, {
    key: 'setGroupName',
    value: function setGroupName(name) {
      var _this8 = this;

      var _bookUrls3 = bookUrls(this.bookBaseUrl),
          groupIndexUrl = _bookUrls3.groupIndexUrl;

      var updatePromises = [this.groupGraph, _rdflib2.default.namedNode(groupIndexUrl)].map(function (namedGraph) {
        var oldNameStatements = _store2.default.match(_this8.groupNode, _ns2.default.vcard('fn'), null, namedGraph);
        var newNameStatement = _rdflib2.default.st(_this8.groupNode, _ns2.default.vcard('fn'), _rdflib2.default.literal(name));
        return patch(namedGraph.value, { toDel: oldNameStatements, toIns: [newNameStatement] }).then(function (solidResponse) {
          _store2.default.removeStatements(oldNameStatements);
          newNameStatement.why = namedGraph;
          _store2.default.add(newNameStatement);
        });
      });
      return Promise.all(updatePromises);
    }
  }]);

  return GroupBuilder;
}();

var Person = function () {
  function Person(element, webIdNode, handleRemove) {
    _classCallCheck(this, Person);

    this.webIdNode = webIdNode;
    this.element = element;
    this.handleRemove = handleRemove;
  }

  _createClass(Person, [{
    key: 'render',
    value: function render() {
      var _this9 = this;

      var container = document.createElement('div');
      container.style.display = 'flex';

      // TODO: take a look at UI.widgets.setName
      var imgSrc = getWithDefault(this.webIdNode, _ns2.default.foaf('img'), _iconBase.iconBase + 'noun_15059.svg');
      var profileImg = document.createElement('img');
      profileImg.src = (0, _escapeHtml2.default)(imgSrc);
      profileImg.width = '50';
      profileImg.height = '50';
      profileImg.style.margin = '5px';

      // TODO: take a look at UI.widgets.setImage
      var name = getWithDefault(this.webIdNode, _ns2.default.foaf('name'), '[' + this.webIdNode + ']');
      var nameSpan = document.createElement('span');
      nameSpan.innerHTML = (0, _escapeHtml2.default)(name);
      nameSpan.style.flexGrow = '1';
      nameSpan.style.margin = 'auto 0';

      var removeButton = document.createElement('button');
      removeButton.textContent = 'Remove';
      removeButton.addEventListener('click', function (event) {
        return _this9.handleRemove().catch(function (err) {
          _this9.element.appendChild((0, _error.errorMessageBlock)(document, (0, _escapeHtml2.default)('' + err)));
        });
      });
      removeButton.style.margin = '5px';

      container.appendChild(profileImg);
      container.appendChild(nameSpan);
      container.appendChild(removeButton);

      this.element.innerHTML = '';
      this.element.appendChild(container);
      return this;
    }
  }]);

  return Person;
}();

function getWithDefault(subject, predicate, defaultValue) {
  var object = _store2.default.any(subject, predicate);
  return object ? object.value : defaultValue;
}

function patch(url, _ref3) {
  var toDel = _ref3.toDel,
      toIns = _ref3.toIns;

  return webClient.patch(url, toDel, toIns).then(function (solidResponse) {
    var status = solidResponse.xhr.status;
    if (status < 200 || status >= 400) {
      var err = new Error('PATCH failed for resource <' + solidResponse.url + '>');
      err.solidResponse = solidResponse;
      throw err;
    }
  });
}

function bookUrls(bookBaseUrl) {
  return {
    bookIndexUrl: bookBaseUrl + 'book.ttl',
    groupIndexUrl: bookBaseUrl + 'groups.ttl',
    groupContainerUrl: bookBaseUrl + 'Group/'
  };
}